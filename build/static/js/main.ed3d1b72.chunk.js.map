{"version":3,"sources":["AuthService.js","hooks/useLocalStorage.js","components/Login.js","components/Register.js","contexts/ContactsProvider.js","contexts/ConversationsProvider.js","components/Conversations.js","components/Contacts.js","components/NewConversationModal.js","components/NewContactModal.js","components/Sidebar.js","components/OpenConversation.js","components/Ribbon.js","components/Home.js","components/Unauthorized.js","contexts/SocketProvider.js","App.js","index.js"],"names":["port","process","PORT","AuthService","domain","login","screenName","password","fetch","method","body","then","token","setToken","register","email","loggedIn","getToken","isTokenExpired","decode","exp","Date","now","err","idToken","localStorage","setItem","getItem","logout","clear","getProfile","url","options","JSON","stringify","headers","_checkStatus","response","json","status","error","Error","statusText","useLocalStorage","key","initialValue","useState","jsonValue","parse","value","setValue","useEffect","Login","props","state","setState","handleChange","e","target","name","prevState","setScreenName","contacts","setContacts","setChatID","setId","htmlFor","onChange","type","id","required","onClick","preventDefault","decoded","console","log","chatID","history","push","catch","to","Register","registered","Fragment","res","ContactsContext","React","createContext","useContacts","useContext","ContactsProvider","children","Provider","addContact","newContact","axios","post","updatedContacts","get","user","data","ConversationsContext","useConversations","ConversationsProvider","conversations","setConversations","selectedConversationIndex","setSelectedConversationIndex","addMessageToConversation","useCallback","recipients","text","sender","prevConv","madeChange","newMessage","newConversations","map","conversation","a","b","length","sort","every","element","index","messages","formattedConversations","recipient","contact","find","message","fromMe","senderName","selected","createConversation","prev","selectConversationIndex","selectedConversation","sendMessage","Conversations","ListGroup","variant","Item","action","active","join","Contacts","NewConversationModal","closeModal","setSelected","Modal","Header","closeButton","Body","Form","onSubmit","Group","controlId","Check","includes","label","contactId","filter","prevId","Button","NewContactModal","idRef","useRef","current","Label","Control","ref","Sidebar","activeKey","setActiveKey","conversationsOpen","modalOpen","setModalOpen","style","width","className","Tab","Container","onSelect","Nav","Link","eventKey","icon","faComments","faUsers","Content","Pane","show","onHide","OpenConversation","setText","setRef","node","scrollIntoView","smooth","handleSubmit","r","height","lastMessage","InputGroup","as","resize","onKeyPress","event","Append","faPaperPlane","Ribbon","useHistory","size","Home","Unauthorized","App","ProtectedRoute","Component","component","rest","render","PublicRoute","exact","path","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ed3d1b72.chunk.js","sourcesContent":["import decode from 'jwt-decode';\n\nconst port = process.env.PORT || 3000\n\nconst AuthService = {\n  domain: `http://localhost:${port}`,\n  login: (screenName, password) => {\n    // Get a token from api server using the fetch api\n    return AuthService.fetch('/login', {\n      method: 'POST',\n      body: { screenName, password }\n    }).then(token => {\n      AuthService.setToken(token)\n      return token;\n    })\n  },\n  register: (screenName, email, password) => {\n    // Get a token from api server using the fetch api\n    return AuthService.fetch('/register', {\n      method: 'POST',\n      body: { screenName, email, password }\n    })\n  },\n  loggedIn: () => {\n    // Checks if there is a saved token and it's still valid\n    const token = AuthService.getToken() // Getting token from localstorage\n    return !!token && !AuthService.isTokenExpired(token) \n  },\n  isTokenExpired: (token) => {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) { // Checking if token is expired. N\n        return true;\n      } else {\n        return false\n      }\n    }\n    catch (err) {\n      return false;\n    }\n  },\n  setToken: (idToken) => {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken)\n  },\n  getToken: () => {\n    // Retrieves the user token from localStorage\n    const token = localStorage.getItem('id_token');\n    return token;\n  },\n  logout: () => {\n    // Clear user token and profile data from localStorage\n    localStorage.clear();\n  },\n  getProfile: () => {\n    // Using jwt-decode npm package to decode the token\n    return decode(AuthService.getToken());\n  },\n  fetch: (url, options) => {\n    options.body = JSON.stringify(options.body);\n\n    // performs api calls sending the required authentication headers\n    const headers = {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    };\n\n    // Setting Authorization header\n    // Authorization: Bearer xxxxxxx.xxxxxxxx.xxxxxx\n    if (AuthService.loggedIn()) {\n      headers['Authorization'] = 'Bearer ' + AuthService.getToken()\n    }\n    return fetch(AuthService.domain + url, { headers, ...options })\n      .then(AuthService._checkStatus)\n      .then(response => response.json())\n  },\n  _checkStatus: (response) => {\n    // raises an error in case response status is not a success\n\n    if (response.status >= 200 && response.status < 300) { // Success status lies between 200 to 300\n      return response;\n    } else {\n      var error = new Error(response.statusText)\n      error.response = response\n      throw error;\n    }\n  }\n}\n\nexport default AuthService;\n","import { useEffect, useState} from 'react'\n\n\nexport default function useLocalStorage(key, initialValue){\n  const [value, setValue] = useState(() => {\n    const jsonValue = localStorage.getItem(key)\n    if(jsonValue !== null) return JSON.parse(jsonValue)\n    if(typeof initialValue === 'function') {\n      return initialValue()\n    } else {\n      return initialValue\n    }\n  })\n\n  useEffect(() => {\n    localStorage.setItem(key, JSON.stringify(value))\n  }, [key, value])\n\n  return [value, setValue]\n}","import React, { useState } from 'react';\nimport { Link, NavLink } from 'react-router-dom';\nimport AuthService from '../AuthService';\nimport decode from 'jwt-decode';\nimport useLocalStorage from '../hooks/useLocalStorage'\n\n\nconst Login = props => {\n  const [state , setState] = useState({\n    screenName: '',\n    password: '',\n    error: false\n  })\n\n  const handleChange = (e) => {\n      const {name, value} = e.target\n      setState(prevState => ({\n          ...prevState,\n          [name]: value\n      }))     \n  }\n  const[screenName, setScreenName] = useLocalStorage('screenName')\n  const[contacts, setContacts] = useLocalStorage('contacts')\n  const[chatID, setChatID] = useLocalStorage('chatID')\n  const[id, setId] = useLocalStorage('id')\n\n  const handleLogin = (e) => {\n    e.preventDefault();\n    AuthService.login(state.screenName, state.password)\n      .then((token) => {\n        let decoded = decode(token);\n        // let contacts = JSON.stringify(decoded.contacts)\n        console.log('contacts >>>: ', contacts)\n        setScreenName(decoded.screenName);\n        setContacts(decoded.contacts);\n        setChatID(decoded.chatID);\n        setId(decoded.id);\n        setState(prevState => ({\n          ...prevState,\n          error: false\n        }))\n      }).then(()=>{\n          props.history.push('/home')\n        })\n      .catch(err => {\n        setState(prevState => ({\n          ...prevState,\n          error: true\n      }))\n    })\n  }\n\n  return (\n    <div>     \n        <h1>Login</h1>\n        <div>\n          <label htmlFor=\"screenName\">Username</label>\n          <input onChange={handleChange} type=\"text\" id=\"screenName\" name=\"screenName\" required />\n        </div>\n        <div>\n          <label htmlFor=\"password\">Password</label>\n          <input onChange={handleChange} type=\"password\" id=\"password\" name=\"password\" required />\n        </div>\n        <button type=\"submit\" onClick={handleLogin}>Login</button>\n        <p><NavLink to='/register'> Register </NavLink></p> \n        {\n        state.error\n        ? <div>Email/password invalid</div>\n        : <div></div>\n        }  \n    </div>\n  )\n};\n\n\nexport default Login;","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport AuthService from '../AuthService';\n\nconst Register = () => {\n  const [state , setState] = useState({\n    screenName: '',\n    email: '',\n    password: '',\n    registered: false,\n    error: false\n  })\n\n  const handleChange = e => {\n      const {name , value} = e.target\n      setState( prevState => ({\n          ...prevState,\n          [name]: value\n      }))\n  }\n\n  const register = (e) => {\n    e.preventDefault();\n    const { screenName, email, password } = state;\n    AuthService.register(screenName, email, password)\n      .then(res => {\n        setState(prevState => ({\n          ...prevState,\n          error: false,\n          registered: true\n        }))\n      }).catch(err => {\n        console.log('error registering: ', err)\n        setState(prevState => ({\n          ...prevState,\n          error: true\n        }))\n        console.error(err)\n      });\n    }\n\n  return (\n    <React.Fragment>\n      {\n        state.registered === false ?\n      <div> \n        <h1>Register</h1>\n        <div>\n          <label htmlFor=\"name\">Username</label>\n          <input type=\"text\" id=\"screenName\" name=\"screenName\" onChange={handleChange} required />\n        </div>\n        <div>\n          <label htmlFor=\"name\">Email</label>\n          <input type=\"email\" id=\"email\" name=\"email\" onChange={handleChange} />\n        </div>\n        <div>\n          <label htmlFor=\"password\">Password</label>\n          <input type=\"password\" id=\"password\" name=\"password\" onChange={handleChange} required />\n        </div>\n        <button type=\"submit\" onClick={register}>Register</button>\n        {\n          state.error === true ?\n          <div>Username is already taken</div>\n          :\n          <div></div>\n        }\n        <p><Link to='/'>Login</Link></p>\n      </div>\n      :\n      <div>\n        Successfully registered\n        <p><Link to='/home'>Go Login</Link></p>\n      </div>\n      }\n    </React.Fragment>\n  )\n};\n\n\nexport default Register;","import React, { useContext } from 'react'\nimport axios from 'axios'\nimport useLocalStorage from '../hooks/useLocalStorage'\n\nconst ContactsContext = React.createContext()\n\nexport function useContacts() {\n  return useContext(ContactsContext)\n}\n\nexport function ContactsProvider({ children }) {\n  const [contacts, setContacts] = useLocalStorage('contacts')\n  const [id, setID] = useLocalStorage('id')\n  function addContact(newContact){\n    axios.post('http://localhost:3000/contacts', {\n        id: id,\n        newContact: newContact\n    }).then((updatedContacts) => {\n      axios.get(`http://localhost:3000/contacts/${id}`)\n      .then( (user) => {\n        setContacts(user.data.contacts)\n        })\n    }).catch((err) => {\n      console.log(err)\n    })\n  }\n\n  return(\n    <ContactsContext.Provider value={{ contacts, addContact }}>\n      {children}\n    </ContactsContext.Provider>\n  )\n}","import React, { useContext, useState, useEffect, useCallback } from 'react'\nimport useLocalStorage from '../hooks/useLocalStorage'\nimport { useContacts } from './ContactsProvider'\n// import { useSocket } from './SocketProvider';\n\nconst ConversationsContext = React.createContext()\n\nexport function useConversations() {\n  return useContext(ConversationsContext)\n}\n\nexport function ConversationsProvider({ id, children }) {\n  const [conversations, setConversations] = useLocalStorage('conversations', [])\n  const [selectedConversationIndex , setSelectedConversationIndex] = useState(0)\n  const { contacts } = useContacts()\n  // const socket = useSocket()\n  // console.log('the socket in conversatinprovider: ', socket)\n  function createConversation(recipients) {\n    setConversations(prev => {\n      // recipients = recipients.map((recip) => {\n      //   return contacts.find(contact => {\n      //     return contact.id === recip\n      //   })\n      // })\n      // return [...prev, { recipients, messages: [] }]\n      return [...prev, {recipients, messages: [] }]\n    })\n  }\n\n  const addMessageToConversation = useCallback(({ recipients, text, sender}) => {\n    setConversations( prevConv => {\n      let madeChange = false\n      const newMessage = { sender, text }\n      const newConversations = prevConv.map( conversation => {\n        if(arrayEquality(conversation.recipients, recipients)){\n          madeChange = true\n          return {\n            ...conversation,\n            messages: [...conversation.messages, newMessage]\n          }\n        }\n        return conversation\n      })\n      if(madeChange){\n        return newConversations\n      } else {\n        return [...prevConv, { recipients, messages: [newMessage] }]\n      }\n    })\n  }, [setConversations])\n\n  // useEffect(() => {\n  //   if(socket == null) return\n  //   socket.on('receive-message', addMessageToConversation)\n\n  //   return () => socket.off('receive-message')\n  // }, [socket, addMessageToConversation])\n\n  function sendMessage(recipients, text) {\n      // socket.emit('send-message', {recipients, text})\n      addMessageToConversation({recipients, text, sender: id})\n  }\n\n  const formattedConversations = conversations.map((conversation, index) => {\n\n    const recipients = conversation.recipients.map(recipient => {\n      const contact = contacts.find(contact => {\n        return contact.id === recipient\n      })\n      const name = (contact && contact.name) || recipient\n      return { id: recipient, name }\n    })\n\n    // console.log('the recipients~~~ ', recipients)\n\n    const messages = conversation.messages.map(message => {\n      const contact = contacts.find(contact => {\n        return contact.id === message.sender\n      })\n      const name = (contact && contact.name) || message.sender\n      const fromMe = id === message.sender\n      return { ...message, senderName: name, fromMe }\n    })\n    \n    const selected = index === selectedConversationIndex\n    return { ...conversation, messages, recipients, selected }\n  })\n\n\n  const value = {\n    conversations: formattedConversations,\n    createConversation,\n    selectConversationIndex: setSelectedConversationIndex,\n    selectedConversation: formattedConversations[selectedConversationIndex],\n    sendMessage\n  }\n\n\n\n  \n  return(\n    <ConversationsContext.Provider value={ value }>\n      {children}\n    </ConversationsContext.Provider>\n  )\n}\n\nfunction arrayEquality(a, b){\n  if(a.length !== b.length) return false\n  a.sort()\n  b.sort()\n  return a.every((element, index) => {\n     return element === b[index]\n  })\n}","import React from 'react'\nimport { ListGroup } from 'react-bootstrap'\nimport { useConversations } from '../contexts/ConversationsProvider'\n\n\nexport default function Conversations() {\n  const { conversations, selectConversationIndex } = useConversations()\n  console.log('the conversationssss ', conversations)\n  return (\n    <ListGroup variant=\"flush\">\n      {conversations.map( (conversation, index) => (\n          <ListGroup.Item \n            key={index} \n            action\n            onClick={() => selectConversationIndex(index)}\n            active={conversation.selected}\n          >\n            {conversation.recipients.map(recipient => recipient.name).join(', ')}\n          </ListGroup.Item>\n      ))}\n    </ListGroup>\n  )\n}","import React from 'react'\nimport { ListGroup } from 'react-bootstrap'\nimport { useContacts } from '../contexts/ContactsProvider'\n\nexport default function Contacts() {\n  const { contacts } = useContacts()\n  console.log('contacts~~~~   ', contacts)\n  return (\n    <ListGroup variant=\"flush\">\n      {contacts ? contacts.map( contact => (\n          <ListGroup.Item key={contact.id} >\n            {contact.name}\n          </ListGroup.Item>\n      ))\n      :\n      <div>Loading...</div>\n    }\n    </ListGroup>\n  )\n}","import React, { useState } from 'react'\nimport { Modal, Form, Button} from 'react-bootstrap'\nimport { useContacts } from '../contexts/ContactsProvider'\nimport { useConversations } from '../contexts/ConversationsProvider'\n\n\nexport default function NewConversationModal({ closeModal }) {\n  const [selected, setSelected] = useState([])\n  const { contacts } = useContacts()\n  const { createConversation } = useConversations()\n\n  // console.log('the selected:  ', selected)\n  function handleCheckbox(contactId) {\n    setSelected(prev =>{\n      if(prev.includes(contactId)) {\n        return prev.filter(prevId => {\n          return contactId !== prevId\n        })\n      } else {\n        return [...prev, contactId]\n      }\n    })\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault()\n    console.log('the selcted:    ', selected)\n    createConversation(selected)\n    closeModal()\n  }\n\n  return (\n    <>\n      <Modal.Header closeButton> Create Conversation </Modal.Header>  \n      <Modal.Body>\n        <Form onSubmit={handleSubmit}>\n          {contacts.map( contact => (\n            <Form.Group controlId={contact.id} key={contact.id}>\n              <Form.Check\n                type=\"checkbox\"\n                value={selected.includes(contact.id)}\n                label={contact.name}\n                onChange={()=>{\n                  handleCheckbox(contact.id)\n                }}\n              />\n              </Form.Group>\n          ))}\n          <Button type=\"submit\">Submit</Button>\n        </Form>\n      </Modal.Body>\n    </>\n  )\n}","import React, { useRef } from 'react'\nimport { Modal, Form, Button } from 'react-bootstrap'\nimport { useContacts } from '../contexts/ContactsProvider'\n\nexport default function NewContactModal({ closeModal }) {\n  const idRef = useRef()\n  const nameRef = useRef()\n  const { addContact } = useContacts()\n\n  function handleSubmit(e){\n    e.preventDefault()\n    addContact(idRef.current.value)\n    closeModal()\n  }\n\n  return (\n    <>\n\n      <Modal.Header closeButton> New Contact </Modal.Header>  \n      <Modal.Body>\n        <Form onSubmit={handleSubmit}>\n          <Form.Group>\n            <Form.Label> Id </Form.Label>\n            <Form.Control type='text' ref={idRef} required />\n          </Form.Group>\n          <Button type=\"submit\">Add</Button>\n        </Form>\n      </Modal.Body>\n    </>\n  )\n}","import React, { useState } from 'react'\nimport { Tab, Nav, Button, Modal} from 'react-bootstrap'\nimport Conversations from './Conversations'\nimport Contacts from './Contacts'\nimport NewConversationModal from './NewConversationModal'\nimport NewContactModal from './NewContactModal'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faComments, faUsers } from '@fortawesome/free-solid-svg-icons'\nconst CONVERSATIONS_KEY = 'Conversations'\nconst CONTACTS_KEY = 'Contacts'\n\nexport default function Sidebar() {\n  const [activeKey, setActiveKey] = useState(CONVERSATIONS_KEY);\n  const conversationsOpen = activeKey === CONVERSATIONS_KEY\n  const [modalOpen, setModalOpen] = useState(false)\n\n  function closeModal(){\n    setModalOpen(false)\n  }\n\n  return (\n    <div style={{ width: '300px'}} className='d-flex flex-column'>\n     <Tab.Container activeKey={activeKey} onSelect={setActiveKey}>\n       <Nav variant='tabs' className=\"justify-content-center nav-fill\">\n          <Nav.Item>\n            <Nav.Link eventKey={CONVERSATIONS_KEY}><FontAwesomeIcon icon={faComments} /> &nbsp;Conversations </Nav.Link>\n          </Nav.Item>\n          <Nav.Item>\n            <Nav.Link eventKey={CONTACTS_KEY}><FontAwesomeIcon icon={faUsers} /> &nbsp;Contacts </Nav.Link>\n          </Nav.Item>\n        </Nav>\n        <Tab.Content className=\"border-right overflow-auto flex-grow-1\">\n          <Tab.Pane eventKey={CONVERSATIONS_KEY}>\n            <Conversations />\n          </Tab.Pane>\n          <Tab.Pane eventKey={CONTACTS_KEY}>\n            <Contacts />\n          </Tab.Pane>\n        </Tab.Content>\n        <div className=\"p-2 border-top border-right small\">\n          Your Id: <span className=\"text-muted\">{localStorage.getItem('id')}</span>\n         <div> Screen Name: <span className=\"text-muted\">{localStorage.getItem('screenName')}</span></div>\n        </div>\n        <Button onClick={()=> setModalOpen(true)} className=\"rounded-0\">\n            {conversationsOpen ? 'Start Conversation' : 'Add Contact' }\n        </Button>\n     </Tab.Container>\n\n     <Modal show={modalOpen} onHide={closeModal}>\n       {\n         conversationsOpen ?\n          <NewConversationModal closeModal={closeModal} /> :\n          <NewContactModal closeModal={closeModal}/> \n        }\n    </Modal>\n    </div>\n    )\n}","import React, { useState, useCallback } from 'react'\nimport { Form, InputGroup, Button } from 'react-bootstrap'\nimport { useConversations } from '../contexts/ConversationsProvider'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faPaperPlane } from '@fortawesome/free-solid-svg-icons'\n\nexport default function OpenConversation() {\n  const [text, setText] = useState('')\n  const { sendMessage, selectedConversation } = useConversations()\n  const setRef = useCallback( node => {\n    if(node) {\n      node.scrollIntoView({ smooth: true})\n    }\n  })\n  function handleSubmit(e) {\n    e.preventDefault()\n    sendMessage(selectedConversation.recipients.map(r => r.id), text)\n    setText('')\n  }\n\n  return(\n\n    <div className=\"open-convo d-flex flex-column flex-grow-1\" style={{ height: '88vh'}}>\n      <div className=\"convo overflow-auto\">\n        <div className=\"d-flex flex-column px-3\">\n          {selectedConversation.messages.map((message, index) => {\n            const lastMessage = selectedConversation.messages.length - 1 === index\n            return (\n              <div\n                key={index}\n                ref={lastMessage ? setRef : null}\n                className={`my-1 d-flex flex-column ${message.fromMe ? 'align-self-end align-items-end' : 'align-items-start'}`}>\n                <div className={\n                  `rounded px-3 py-2 \n                  ${message.fromMe ? 'bg-primary text-white' : 'border'}`}>\n                    {message.text}\n                </div>\n                <div className={`text-muted small ${message.fromMe ? 'text-right' : ''}`}>\n                  {message.fromMe ? 'You' : message.senderName}\n                </div>\n              </div>\n            )\n          })}\n        </div>\n      </div>\n      <Form onSubmit={handleSubmit}>\n        <Form.Group className=\"m-2\">\n            <InputGroup>\n              <Form.Control \n                as=\"textarea\"\n                className=\"rounded-0 send-txt\"\n                required \n                value={text}\n                onChange={ e => setText(e.target.value)}\n                style={{ height: '60px', resize: 'none' }}\n                onKeyPress={event => {\n                  if (event.key === \"Enter\") {\n                    handleSubmit(event);\n                  }\n                }}\n              />\n              <InputGroup.Append>\n                <Button type=\"submit\" className=\"rounded-0\"><FontAwesomeIcon icon={faPaperPlane} />&nbsp;&nbsp;Send </Button>\n              </InputGroup.Append>\n            </InputGroup>\n        </Form.Group>\n      </Form>\n    </div>\n  )\n}\n","import React, { useState } from 'react'\nimport { Button } from 'react-bootstrap'\nimport AuthService from '../AuthService'\nimport Sidebar from './Sidebar'\nimport OpenConversation from './OpenConversation'\n// import { useSocket } from '../contexts/SocketProvider';\nimport { useHistory } from \"react-router-dom\";\n\nexport default function Ribbon(props) {\n  let history = useHistory()\n  // const socket = useSocket()\n  // console.log('the socket in ribbon: ', socket)\n  const handleLogout = () => {\n    // AuthService.logout(socket.id);\n    // socket.emit('logout')\n    // socket.disconnect();\n    localStorage.clear()\n    // console.log('disconnected from client side')\n    // props.history.replace('/');\n    history.push(\"/\")\n    // console.log('the socket now is  ', socket)\n  }\n  return ( \n      <div className='ribbon'>\n        <div>\n          Ribbon Text\n        </div>\n          <Button className='logout float-right' variant=\"secondary\" size=\"sm\" onClick={handleLogout}>\n            Logout\n          </Button>{' '}\n      </div> \n  ) \n};","import React, { useState } from 'react'\nimport { Button } from 'react-bootstrap'\nimport AuthService from '../AuthService'\nimport Sidebar from './Sidebar'\nimport OpenConversation from './OpenConversation'\n// import { ContactsProvider } from '../contexts/ContactsProvider'\n// import { ConversationsProvider } from '../contexts/ConversationsProvider'\nimport { useConversations } from '../contexts/ConversationsProvider'\n// import useLocalStorage from '../hooks/useLocalStorage'\nimport Ribbon from './Ribbon';\n\nexport default function Home(props) {\n  const { selectedConversation } = useConversations()\n  console.log('selected conversation in home  ', selectedConversation)\n  // selectedConversation = true;\n  return (\n    <>  \n      <div className='d-flex' style={{ height: '100vh '}}>\n        <Sidebar />\n        <Ribbon />\n        { selectedConversation && <OpenConversation /> }\n      </div>\n    </>  \n  ) \n};","import React from 'react';\nimport { Link } from 'react-router-dom';\n// import 'styles.css';\n\nconst Unauthorized = () => {\n  return (\n    <div className='container'>\n      This page is unauthorized. Please login.\n      <p><Link to='/'>Back to Home</Link></p>\n    </div>\n  )\n}\n\nexport default Unauthorized;","import React, { useContext, useEffect, useState } from 'react'\nimport io from 'socket.io-client'\n\nconst SocketContext = React.createContext()\n\nexport function useSocket() {\n  return useContext(SocketContext)\n}\n\nexport function SocketProvider({ id, children }){\n  const [socket, setSocket] = useState()\n\n  useEffect(() => {\n    if(id){\n      const newSocket = io('http://localhost:3000', { query: { id } })\n      setSocket(newSocket)\n      return () => newSocket.close()\n    }\n  }, [id])\n\n  return (\n    <SocketContext.Provider value={socket}>\n      {children}\n    </SocketContext.Provider>\n  )\n}","import React, { useState } from 'react';\nimport {\n  Route,\n  NavLink,\n  HashRouter,\n  Redirect,\n} from 'react-router-dom';\nimport Login from './components/Login';\nimport Register from './components/Register';\nimport Home from './components/Home';\nimport AuthService from './AuthService.js'\nimport Unauthorized from './components/Unauthorized';\nimport axios from 'axios';\nimport { ContactsProvider } from './contexts/ContactsProvider'\nimport { ConversationsProvider } from './contexts/ConversationsProvider'\nimport useLocalStorage from './hooks/useLocalStorage'\nimport { SocketProvider } from './contexts/SocketProvider';\n\n\nfunction App() {\n  // const [user, setUser] = useState(() => {\n  //   return false\n  // });\n  const[id, setId] = useLocalStorage('id')\n  // const id = localStorage.getItem('id')\n  const ProtectedRoute = ({ component: Component, ...rest }) => (\n    <Route {...rest} render={(props) => (\n      AuthService.loggedIn() === true\n        ? <Component {...props} />\n        : <Redirect to='/' />\n    )} />\n  );\n\n  const PublicRoute = ({ component: Component, ...rest }) => (\n    <Route {...rest} render={(props) => (\n      AuthService.loggedIn() === true\n        ? <Redirect to='/home' />\n        : <Component {...props} />\n    )} />\n  );\n\n  return (\n    <>\n      {/* <SocketProvider id={id}> */}\n        <ContactsProvider>\n          <ConversationsProvider id={id}>\n            <div className=\"App\">\n            <HashRouter>\n              <PublicRoute exact path='/' component={Login} />\n              <PublicRoute exact path='/register' component={Register} />\n              <ProtectedRoute exact path='/home' component={Home} />\n              <Route exact path='/unauthorized' component={Unauthorized} />\n            </HashRouter>\n            </div>\n          </ConversationsProvider>\n        </ContactsProvider>\n      {/* </SocketProvider> */}\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './styles.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}